####################################################
			 ΤΣΙΑΤΟΥΡΑΣ ΕΥΑΓΓΕΛΟΣ
			  Α.Μ. 1115201200185
####################################################
 COMPILE:
 Τα προγράμματα διαθέτουν επι μέρους Makefiles και μπορούν
 να μεταφρασθούν και να εκτελεστούν ανεξάρτητα. Το πρόγραμμα
 restaurant για να τρέξει χρειάζεται τα προγράμματα customer,
 doorman και waiter και για αυτό το λόγο το Makefile του 
 αναλαμβάνει και την κλήση των Makefiles των παραπάνω 
 προγραμμάτων

 Compile: make
 Clean:   make clean
 (Ισχύει για όλα τα προγράμματα του project)

####################################################
ΥΛΟΠΟΙΗΣΗ:

Το project είναι πλήρως υλοποιημένo και η λειτουργικότητα
της προσομοίωσης πιστεύω πως είναι ικανοποιητική. Μερικά 
σχόλια για την υλοποίηση είναι ότι έχει γίνει χρήση κάποιων
σημαφόρων, πιο συγκεκριμενά για την επίτευξη επικοινωνίας
doorman-customer χρειάστηκαν 4 σημαφόροι, 3 για τον doorman
και 1 για τον customer. Επίσης η ουρά έξω απο το εστιατόριο
έχει γίνει με την βοήθεια semaphore. Καθώς ένας πελάτης
έρχεται σε επικοινωνία με τον doorman, αρχικά o doorman εκτελεί
sem_wait(semDoormanWait1) εως ότου ο πελάτης υποβάλει το μέγεθός
του στο σχετικό πέδιο της δομής Door (customerGroupSize) 
που είναι μέλος της δομής Restaurant η οποία αποθηκευέται στο 
shared segment. Αφού ο πελάτης υποβάλλει το μέγεθός του εκτελεί 
sem_post(semDoormanWait1) ελευθερώνοντας τον doorman και 
sem_wait(semCustomer) περιμένοντας μέχρι ο doorman είτε να βρει
ελεύθερο χώρο (σε τραπέζι ή στο bar) είτε να του πει να φύγει 
επειδή το εστιατόριο είναι γεμάτο. Ο Doorman αναζητά για ελεύθερο 
χώρο, σε περίπτωση που βρεί κάποιο τραπέζι ελεύθερο γράφει τον 
αντίστοιχο αριθμό τραπεζίου στο πεδίο της δομής Door (gotoTableID),
αλλίως αν δεν βρει τραπέζι και υπάρχει χώρος στο bar γράφει στο 
αντίστοιχο πεδίο της δομής Door (gotoBar) ή αν τελικά δεν υπάρχει
χώρος γράφει στο αντίστοιχο πεδίο της δομής Door (leave). O doorman
εκτελέι sem_wait(semDoormanWait2) μέχρις ότου ο πελάτης με τον οποίο
επικοινωνεί να τακτοποιηθεί σε καποιο τραπέζι ή στο bar ή απλά να
φύγει. Αξίζει να σημειώθει οτι ο πελάτης μπορεί να επιλέξει να μην
πάει στο bar αν του το υποδείξει ο doorman και επίσης κατά την 
παραμονή του στο bar μπορεί επίσης να φύγει. Οι πελάτες οι οποίοι
βρίσκονται στο bar είναι σε κατάσταση busy waiting καθώς ελέγχουν 
τη μεταβλητή gotoTableID της δομής CustomerGroup που είναι μέλος 
της δομής Bar. Η παραπάνω μεταβλητή μπορεί να παρεί τιμές τραπεζιών 
απο τον doorman. Eπίσης έχει δωθεί προτεραιότητα στον doorman να ελεγχεί
πρώτα τους πελάτες του bar και στη συνέχεια της πόρτας, αν κανένας
πελάτης του bar δεν εξυπηρετήθηκε. Ο doorman εαν βρει τραπέζι ελεύθερο
και το αναθέσει σε πελάτη απο το bar εκτελεί sem_wait(semDoormanWait3)
και περιμένει εως ότου τακτοποιηθεί ο πελάτης στο τραπέζι του. 

Η υλοποίηση του bar έχει γίνει με τη βοηθεία ενός στατικού πίνακα (τον 
έχω ορίσει 15 θέσεις) τύπου CustomerGroup όπου κάθε κελί αναπαριστά έναν
πελάτη που κάθεται στο Bar. Ο πίνακας αυτός γεμίζει ΜΟΝΟ στην περίπτωση
που έρθουν 15 πελάτες μεγέθους 1. Δηλαδή σε μια κοινή περίπτωση η εικόνα
του θα ειναι κάπως έτσι.

  0           1          2           3           4                  14
+-----+    +-----+    +-----+     +-----+     +-----+            +-----+
|size |    |size |    |size |     |size |     |  -  |            |  -  |
| 4   |    | 4   |    | 6   |     | 1   |     |  -  |   .......  |  -  |
+-----+    +-----+    +-----+     +-----+     +-----+            +-----+

MAXIMUM PEOPLE == 15
CURRENT PEOPLE == 15

Δηλαδή ο πίνακας γεμίζει με βάση το μέγιστο πλήθος ανθρώπων που μπορούν να 
κάτσουν στο bar.

Τα τραπέζια διαθέτουν δυο semaphores τα οποία χρησιμεύουν στην αναπαράσταση
λήψης παραγγελίας καθώς και στην αναπαράσταση πληρωμής του σερβιτόρου.

Οι σερβιτόροι αφού πάρουν παραγγελία απο ένα τραπέζι είναι υπεύθυνοι επίσης
και για την λήψη των χρημάτων απο το συγκεκριμενο τραπέζι χωρίς να εμπλακεί
άλλος σερβιτόρος.

Τέλος έχει γίνει χρήση ConfigFile καθως και μηχανισμός logging.

####################################################